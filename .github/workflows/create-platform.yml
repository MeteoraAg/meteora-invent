name: Create Raydium Platform

on:
  # Run manually from the Actions tab
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  create-platform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install pnpm and add it to PATH
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
          run_install: true   # runs "pnpm install" for you

      # Fallback if pnpm/action-setup ever flakes
      - name: Ensure pnpm present (Corepack fallback)
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found from action, enabling via Corepack fallback..."
            corepack enable
            corepack prepare pnpm@10.14.0 --activate
          fi
          pnpm -v

      # (Optional) Sanitize registry to avoid network flakiness / scope overrides
      - name: Sanitize npm registries (optional)
        shell: bash
        run: |
          set -euo pipefail
          echo "registry=https://registry.npmjs.org/" > ~/.npmrc
          pnpm config set registry https://registry.npmjs.org/
          npm config set registry https://registry.npmjs.org/
          pnpm config delete @jsr:registry || true
          npm config delete @jsr:registry || true
          echo "@jsr:registry=https://registry.npmjs.org/" >> ~/.npmrc
          pnpm config set fetch-retries 4
          pnpm config set network-timeout 600000

      # If your repo is a monorepo and the script is inside scaffolds/fun-launch,
      # "pnpm install" above (run_install) already handled deps at root. If you need, you can re-run:
      # - name: Install deps (optional)
      #   run: pnpm install --no-frozen-lockfile

      - name: Run create-platform script
        id: run_script
        env:
          # Required secrets (configure in repo Settings → Secrets and variables → Actions)
          RPC_URL: ${{ secrets.RPC_URL }}  # e.g. https://api.devnet.solana.com (or a Helius URL)
          RAYDIUM_PLATFORM_AUTHORITY_SECRET: ${{ secrets.RAYDIUM_PLATFORM_AUTHORITY_SECRET }} # base58 private key

          # Fees (examples; change as you like)
          RAYDIUM_SHARE_FEE_BPS: "175"           # 1.75% platform fee
          RAYDIUM_CREATION_FEE_LAMPORTS: "25000000"  # 0.025 SOL

          # LP split on migration (must total 10000 bps = 100%)
          RAYDIUM_MIGRATE_SPLIT_PLATFORM_BPS: "0"
          RAYDIUM_MIGRATE_SPLIT_CREATOR_BPS: "10000"  # 100% to creator
          RAYDIUM_MIGRATE_SPLIT_BURN_BPS: "0"

          # Prefer unlocked LP (safe no-op if SDK ignores it)
          RAYDIUM_LOCK_LP: "false"

          # Optional branding (used if your script reads these)
          NEXT_PUBLIC_SITE_NAME: "Your LaunchPad"
          PUBLIC_BUCKET_URL: ""
          R2_PUBLIC_BASE: ""
        run: |
          set -eo pipefail
          # Run the script (ts-node/tsx via pnpm dlx)
          pnpm dlx tsx scaffolds/fun-launch/scripts/raydium/create-platform.ts | tee script.log

          # Extract "Platform PDA: XYZ" from output and append to job summary
          PDA_LINE="$(grep -m1 -E 'Platform PDA:' script.log || true)"
          if [ -n "$PDA_LINE" ]; then
            echo "$PDA_LINE" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Platform PDA not found in output. Check logs." >> "$GITHUB_STEP_SUMMARY"
          fi
